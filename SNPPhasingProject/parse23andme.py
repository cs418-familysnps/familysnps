'''This function accepts a file object that represents a 23andme raw data file. 
	This file should appear somewhat like the following:

# This data file generated by 23andMe at: Sun Aug  7 17:40:59 2011
#
# Below is a text version of your data. Fields are TAB-separated
# Each line corresponds to a single SNP.  For each SNP, we provide its identifier 
# (an rsid or an internal id), its location on the reference human genome, and the 
# genotype call oriented with respect to the plus strand on the human reference 
# sequence.     We are using reference human assembly build 36.  Note that it is possible 
# that data downloaded at different times may be different due to ongoing improvements 
# in our ability to call genotypes. More information about these changes can be found at:
# https://www.23andme.com/you/download/revisions/
# 
# More information on reference human assembly build 36:
# http://www.ncbi.nlm.nih.gov/projects/mapview/map_search.cgi?taxid=9606&build=36
#
# rsid	chromosome	position	genotype
rs3094315	1	742429	GG
rs12562034	1	758311	GG
rs3934834	1	995669	CC
rs9442372	1	1008567	GG
rs3737728	1	1011278	GG
rs11260588	1	1011521	GG
rs6687776	1	1020428	CC
rs9651273	1	1021403	GG
rs4970405	1	1038818	AA
rs12726255	1	1039813	AA
rs11807848	1	1051029	TT
...

The function ignores all lines that begin with '#'. There should be no empty newlines. 

The 





import sys
from Variant_ADTs import Variant
from Variant_ADTs import VariantType

def parse23andmeFile(file):
	
	SNPfile = file

	dictionary = {}

	for line in SNPfile.readlines():
		if line[0] != '#':
			line = line.rstrip()
			fields = line.split('\t')
			chromosome = fields[1]
			position = fields[2]
			alt = list(fields[3])
			#print "Record(CHROM=%s, POS=%s, REF=%s, ALT=%s)" % (chromosome, position, "?", alt)
			variant = Variant()

			if len(alt) == 1:
				variant.myType = VariantType.SINGLESTRANDED
			else:
				if len(alt) == 2:
					if alt[0] == alt[1]:
						variant.myType = VariantType.HOMOZYGOUS
					else:
						variant.myType = VariantType.HETEROZYGOUS	
	
	
			variant.location = ("chr%s" % (chromosome),position)
			
			variant.allele1 = alt[0]
			
			if len(alt) == 2:
				variant.allele2 = alt[1]
			else:
				variant.allele2 = alt[0]
	
			#dictionary[position] = variant
			dictionary[variant.location] = variant
	
	return dictionary			
